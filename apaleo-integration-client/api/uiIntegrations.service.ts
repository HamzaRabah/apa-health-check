/**
 * Integration API
 * The Integration API allows apps to ...
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CreateUiIntegrationModel } from '../model/createUiIntegrationModel';
// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';
// @ts-ignore
import { ReplaceUiIntegrationModel } from '../model/replaceUiIntegrationModel';
// @ts-ignore
import { UiIntegrationCreatedModel } from '../model/uiIntegrationCreatedModel';
// @ts-ignore
import { UiIntegrationItemModel } from '../model/uiIntegrationItemModel';
// @ts-ignore
import { UiIntegrationListModel } from '../model/uiIntegrationListModel';
// @ts-ignore
import { UiIntegrationTestResultModel } from '../model/uiIntegrationTestResultModel';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class UiIntegrationsService {

    protected basePath = 'http://localhost';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param target 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetByIdDelete(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public integrationUiIntegrationsByTargetByIdDelete(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public integrationUiIntegrationsByTargetByIdDelete(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public integrationUiIntegrationsByTargetByIdDelete(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetByIdDelete.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling integrationUiIntegrationsByTargetByIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param target 
     * @param id 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetByIdGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<UiIntegrationItemModel>;
    public integrationUiIntegrationsByTargetByIdGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<UiIntegrationItemModel>>;
    public integrationUiIntegrationsByTargetByIdGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<UiIntegrationItemModel>>;
    public integrationUiIntegrationsByTargetByIdGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetByIdGet.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling integrationUiIntegrationsByTargetByIdGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<UiIntegrationItemModel>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param target 
     * @param id 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetByIdPut(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, body: ReplaceUiIntegrationModel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public integrationUiIntegrationsByTargetByIdPut(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, body: ReplaceUiIntegrationModel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public integrationUiIntegrationsByTargetByIdPut(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, body: ReplaceUiIntegrationModel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public integrationUiIntegrationsByTargetByIdPut(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, body: ReplaceUiIntegrationModel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetByIdPut.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling integrationUiIntegrationsByTargetByIdPut.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling integrationUiIntegrationsByTargetByIdPut.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}/${encodeURIComponent(String(id))}`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Tests a private source integration.
     * Tests that the process of getting the public url from the provided url is done correctly.  If there are any errors with the process, it will provide information on what might have gone wrong.
     * @param target Target for the integration
     * @param id Id of the integration to be tested
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetByIdtestGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<UiIntegrationTestResultModel>;
    public integrationUiIntegrationsByTargetByIdtestGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<UiIntegrationTestResultModel>>;
    public integrationUiIntegrationsByTargetByIdtestGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<UiIntegrationTestResultModel>>;
    public integrationUiIntegrationsByTargetByIdtestGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetByIdtestGet.');
        }
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling integrationUiIntegrationsByTargetByIdtestGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<UiIntegrationTestResultModel>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}/${encodeURIComponent(String(id))}/$test`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param target 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<UiIntegrationListModel>;
    public integrationUiIntegrationsByTargetGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<UiIntegrationListModel>>;
    public integrationUiIntegrationsByTargetGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<UiIntegrationListModel>>;
    public integrationUiIntegrationsByTargetGet(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<UiIntegrationListModel>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param target 
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsByTargetPost(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', body: CreateUiIntegrationModel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<UiIntegrationCreatedModel>;
    public integrationUiIntegrationsByTargetPost(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', body: CreateUiIntegrationModel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<UiIntegrationCreatedModel>>;
    public integrationUiIntegrationsByTargetPost(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', body: CreateUiIntegrationModel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<UiIntegrationCreatedModel>>;
    public integrationUiIntegrationsByTargetPost(target: 'DashboardPropertyContext' | 'DashboardAccountContext' | 'ReservationDetailsTab' | 'PropertyMenuReports' | 'PropertyMenuApps' | 'AccountMenuApps' | 'CompanyDetailsTab', body: CreateUiIntegrationModel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {
        if (target === null || target === undefined) {
            throw new Error('Required parameter target was null or undefined when calling integrationUiIntegrationsByTargetPost.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling integrationUiIntegrationsByTargetPost.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json-patch+json',
            'application/json',
            'text/json',
            'application/_*+json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<UiIntegrationCreatedModel>(`${this.configuration.basePath}/integration/v1/ui-integrations/${encodeURIComponent(String(target))}`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * &lt;br&gt;You must have this scope: \&#39;integration:ui-integrations.manage\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public integrationUiIntegrationsGet(observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<UiIntegrationListModel>;
    public integrationUiIntegrationsGet(observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpResponse<UiIntegrationListModel>>;
    public integrationUiIntegrationsGet(observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<HttpEvent<UiIntegrationListModel>>;
    public integrationUiIntegrationsGet(observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/plain' | 'application/json' | 'text/json', context?: HttpContext}): Observable<any> {

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/plain',
                'application/json',
                'text/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<UiIntegrationListModel>(`${this.configuration.basePath}/integration/v1/ui-integrations`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
