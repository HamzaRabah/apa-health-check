/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CountModel } from '../model/countModel';
// @ts-ignore
import { CreateFolioModel } from '../model/createFolioModel';
// @ts-ignore
import { FolioCreatedModel } from '../model/folioCreatedModel';
// @ts-ignore
import { FolioListModel } from '../model/folioListModel';
// @ts-ignore
import { FolioModel } from '../model/folioModel';
// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';
// @ts-ignore
import { Operation } from '../model/operation';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class FolioService {

    protected basePath = 'https://api.apaleo.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Deletes a folio.
     * Deletes a folio. This cannot be undone.  You can delete a folio only if it\&#39;s not a main folio,  and the folio is empty (it has no charges, allowance, payments or pending payments).  &lt;br /&gt;  Requires \&#39;allowed action\&#39;: Delete.&lt;br&gt;You must have this scope: \&#39;folios.manage\&#39;.
     * @param id The folio ID.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosByIdDelete(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public financeFoliosByIdDelete(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public financeFoliosByIdDelete(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public financeFoliosByIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFoliosByIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/finance/v1/folios/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns one folio.
     * Get a folio by ID.&lt;br&gt;You must have at least one of these scopes: \&#39;folios.read, folios.manage\&#39;.
     * @param id The ID of the folio.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: folios. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosByIdGet(id: string, expand?: Array<'folios'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FolioModel>;
    public financeFoliosByIdGet(id: string, expand?: Array<'folios'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FolioModel>>;
    public financeFoliosByIdGet(id: string, expand?: Array<'folios'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FolioModel>>;
    public financeFoliosByIdGet(id: string, expand?: Array<'folios'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFoliosByIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FolioModel>(`${this.configuration.basePath}/finance/v1/folios/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check if the folio exists.
     * Check if the folio exists.&lt;br&gt;You must have at least one of these scopes: \&#39;folios.read, folios.manage\&#39;.
     * @param id
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosByIdHead(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public financeFoliosByIdHead(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public financeFoliosByIdHead(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public financeFoliosByIdHead(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFoliosByIdHead.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.head<any>(`${this.configuration.basePath}/finance/v1/folios/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Allows to modify certain properties of a folio
     * Here is the list of operations that are currently allowed:  - Replace debitor (for guest folios only)  - Add a company (not for house folios)  - Replace/remove a company (not for house folios)&lt;br&gt;You must have this scope: \&#39;folios.manage\&#39;.
     * @param id The folio ID.
     * @param body Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.              See the FolioDebitorModel in GET for values that can be changed.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosByIdPatch(id: string, body: Array<Operation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public financeFoliosByIdPatch(id: string, body: Array<Operation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public financeFoliosByIdPatch(id: string, body: Array<Operation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public financeFoliosByIdPatch(id: string, body: Array<Operation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling financeFoliosByIdPatch.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling financeFoliosByIdPatch.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.patch<any>(`${this.configuration.basePath}/finance/v1/folios/${encodeURIComponent(String(id))}`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of all folios.
     * Allowed actions are only returned, when the list is filtered by reservation ID.&lt;br&gt;You must have at least one of these scopes: \&#39;folios.read, folios.manage\&#39;.
     * @param propertyIds Filter folio list by property IDs
     * @param companyIds Filter folio list by company IDs
     * @param reservationIds Filter folio list by reservation IDs
     * @param bookingIds Filter folio list by booking IDs
     * @param isEmpty If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).  If set to {false}, only return non-empty folios
     * @param checkedOutOnAccountsReceivable If set to {true}, only return folios that have been checked out on accounts receivables  Otherwise, returns all.
     * @param excludeClosed If set to {true}, closed folios are filtered out from the result collection
     * @param hasInvoices If set to {true}, only return folios that been invoices
     * @param createdFrom The inclusive start time of the date of creation. Mostly useful for external folios&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param createdTo The exclusive end time of the date of creation. Mostly useful for external folios&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param onlyMain If set to {true}, only main folios are returned, otherwise all.
     * @param type The type of the folio
     * @param externalFolioCode Allows filtering external folios by code.  Useful when you use external folios with custom codes.  Specifying this parameter will ignore the &lt;b&gt;Type&lt;/b&gt; parameter and treat as if it would be set to \&quot;External\&quot; instead.
     * @param textSearch This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,  folio id. The search is case insensitive.
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: charges, allowances, transitoryCharges, payments, allowedActions, company, warnings. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, pageNumber?: number, pageSize?: number, expand?: Array<'charges' | 'allowances' | 'transitoryCharges' | 'payments' | 'allowedActions' | 'company' | 'warnings'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FolioListModel>;
    public financeFoliosGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, pageNumber?: number, pageSize?: number, expand?: Array<'charges' | 'allowances' | 'transitoryCharges' | 'payments' | 'allowedActions' | 'company' | 'warnings'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FolioListModel>>;
    public financeFoliosGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, pageNumber?: number, pageSize?: number, expand?: Array<'charges' | 'allowances' | 'transitoryCharges' | 'payments' | 'allowedActions' | 'company' | 'warnings'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FolioListModel>>;
    public financeFoliosGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, pageNumber?: number, pageSize?: number, expand?: Array<'charges' | 'allowances' | 'transitoryCharges' | 'payments' | 'allowedActions' | 'company' | 'warnings'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                propertyIds.join(COLLECTION_FORMATS['csv']), 'propertyIds');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (reservationIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                reservationIds.join(COLLECTION_FORMATS['csv']), 'reservationIds');
        }
        if (bookingIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bookingIds.join(COLLECTION_FORMATS['csv']), 'bookingIds');
        }
        if (isEmpty !== undefined && isEmpty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isEmpty, 'isEmpty');
        }
        if (checkedOutOnAccountsReceivable !== undefined && checkedOutOnAccountsReceivable !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>checkedOutOnAccountsReceivable, 'checkedOutOnAccountsReceivable');
        }
        if (excludeClosed !== undefined && excludeClosed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeClosed, 'excludeClosed');
        }
        if (hasInvoices !== undefined && hasInvoices !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasInvoices, 'hasInvoices');
        }
        if (createdFrom !== undefined && createdFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdFrom, 'createdFrom');
        }
        if (createdTo !== undefined && createdTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdTo, 'createdTo');
        }
        if (onlyMain !== undefined && onlyMain !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>onlyMain, 'onlyMain');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (externalFolioCode !== undefined && externalFolioCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>externalFolioCode, 'externalFolioCode');
        }
        if (textSearch !== undefined && textSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>textSearch, 'textSearch');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FolioListModel>(`${this.configuration.basePath}/finance/v1/folios`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create additional folios for a reservation, or new external folios
     * Use this call to create a new folio.&lt;br&gt;You must have at least one of these scopes: \&#39;reservations.create, reservations.manage, folios.manage\&#39;.
     * @param body The definition of the folio.
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFoliosPost(body: CreateFolioModel, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FolioCreatedModel>;
    public financeFoliosPost(body: CreateFolioModel, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FolioCreatedModel>>;
    public financeFoliosPost(body: CreateFolioModel, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FolioCreatedModel>>;
    public financeFoliosPost(body: CreateFolioModel, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling financeFoliosPost.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<FolioCreatedModel>(`${this.configuration.basePath}/finance/v1/folios`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns number of folios.
     * Returns number of folios matching the filter criteria.&lt;br&gt;You must have at least one of these scopes: \&#39;folios.read, folios.manage\&#39;.
     * @param propertyIds Filter folio list by property IDs
     * @param companyIds Filter folio list by company IDs
     * @param reservationIds Filter folio list by reservation IDs
     * @param bookingIds Filter folio list by booking IDs
     * @param isEmpty If set to {true}, only return empty folios (no unmoved [transitory] charges, no unmoved payments, no allowances).  If set to {false}, only return non-empty folios
     * @param checkedOutOnAccountsReceivable If set to {true}, only return folios that have been checked out on accounts receivables  Otherwise, returns all.
     * @param excludeClosed If set to {true}, closed folios are filtered out from the result collection
     * @param hasInvoices If set to {true}, only return folios that been invoices
     * @param createdFrom The inclusive start time of the date of creation. Mostly useful for external folios&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param createdTo The exclusive end time of the date of creation. Mostly useful for external folios&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param onlyMain If set to {true}, only main folios are returned, otherwise all.
     * @param type The type of the folio
     * @param externalFolioCode Allows filtering external folios by code.  Useful when you use external folios with custom codes.  Specifying this parameter will ignore the &lt;b&gt;Type&lt;/b&gt; parameter and treat as if it would be set to \&quot;External\&quot; instead.
     * @param textSearch This will filter all folios where the provided text is contained in: debitor first name or last name or email or company name,  folio id. The search is case insensitive.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeFolioscountGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<CountModel>;
    public financeFolioscountGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<CountModel>>;
    public financeFolioscountGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<CountModel>>;
    public financeFolioscountGet(propertyIds?: Array<string>, companyIds?: Array<string>, reservationIds?: Array<string>, bookingIds?: Array<string>, isEmpty?: boolean, checkedOutOnAccountsReceivable?: boolean, excludeClosed?: boolean, hasInvoices?: boolean, createdFrom?: string, createdTo?: string, onlyMain?: boolean, type?: 'House' | 'Guest' | 'External', externalFolioCode?: string, textSearch?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                propertyIds.join(COLLECTION_FORMATS['csv']), 'propertyIds');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (reservationIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                reservationIds.join(COLLECTION_FORMATS['csv']), 'reservationIds');
        }
        if (bookingIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                bookingIds.join(COLLECTION_FORMATS['csv']), 'bookingIds');
        }
        if (isEmpty !== undefined && isEmpty !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isEmpty, 'isEmpty');
        }
        if (checkedOutOnAccountsReceivable !== undefined && checkedOutOnAccountsReceivable !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>checkedOutOnAccountsReceivable, 'checkedOutOnAccountsReceivable');
        }
        if (excludeClosed !== undefined && excludeClosed !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeClosed, 'excludeClosed');
        }
        if (hasInvoices !== undefined && hasInvoices !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>hasInvoices, 'hasInvoices');
        }
        if (createdFrom !== undefined && createdFrom !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdFrom, 'createdFrom');
        }
        if (createdTo !== undefined && createdTo !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>createdTo, 'createdTo');
        }
        if (onlyMain !== undefined && onlyMain !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>onlyMain, 'onlyMain');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (externalFolioCode !== undefined && externalFolioCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>externalFolioCode, 'externalFolioCode');
        }
        if (textSearch !== undefined && textSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>textSearch, 'textSearch');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<CountModel>(`${this.configuration.basePath}/finance/v1/folios/$count`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
