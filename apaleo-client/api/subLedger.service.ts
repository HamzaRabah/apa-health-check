/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AccountingTransactionListModel } from '../model/accountingTransactionListModel';
// @ts-ignore
import { AccountingTransactionPairListModel } from '../model/accountingTransactionPairListModel';
// @ts-ignore
import { AggregateTransactionListModel } from '../model/aggregateTransactionListModel';
// @ts-ignore
import { ChartOfAccountsModel } from '../model/chartOfAccountsModel';
// @ts-ignore
import { ExportGrossTransactionListModel } from '../model/exportGrossTransactionListModel';
// @ts-ignore
import { FinanceAccountListModel } from '../model/financeAccountListModel';
// @ts-ignore
import { FinanceAccountModel } from '../model/financeAccountModel';
// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class SubLedgerService {

    protected basePath = 'https://api.apaleo.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Aggregates transactions by date (business day) for all accounts and a given period.
     * Returns credited and debited amounts aggregated by transactions\&#39; date (business day) for all accounts and a given period.  Stores an entry in the export audit log.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Specifies the property transactions will be aggregated for.
     * @param from The inclusive start date of the interval
     * @param to The exclusive end date of the interval
     * @param reference Filter transactions by reference (reservation id/external folio id/property id for house folio).
     * @param accountNumber Filter transactions by account number
     * @param accountType Filter transactions by type
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report (2-letter ISO code)
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsAggregateDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<AggregateTransactionListModel>;
    public financeAccountsAggregateDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<AggregateTransactionListModel>>;
    public financeAccountsAggregateDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<AggregateTransactionListModel>>;
    public financeAccountsAggregateDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsAggregateDailyPost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsAggregateDailyPost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsAggregateDailyPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (reference !== undefined && reference !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reference, 'reference');
        }
        if (accountNumber !== undefined && accountNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNumber, 'accountNumber');
        }
        if (accountType !== undefined && accountType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountType, 'accountType');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<AggregateTransactionListModel>(`${this.configuration.basePath}/finance/v1/accounts/aggregate-daily`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aggregates transactions pairs by date (business day) for all accounts and a given period.
     * Returns total amount credited from one account to another&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Specifies the property transactions will be aggregated for.
     * @param from The inclusive start date of the interval
     * @param to The exclusive end date of the interval
     * @param reference Filter transactions by reference (reservation id/external folio id/property id for house folio).
     * @param accountNumber Filter transactions by account number
     * @param accountType Filter transactions by type
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report (2-letter ISO code)
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsAggregatePairsDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<AccountingTransactionPairListModel>;
    public financeAccountsAggregatePairsDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<AccountingTransactionPairListModel>>;
    public financeAccountsAggregatePairsDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<AccountingTransactionPairListModel>>;
    public financeAccountsAggregatePairsDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsAggregatePairsDailyPost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsAggregatePairsDailyPost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsAggregatePairsDailyPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (reference !== undefined && reference !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reference, 'reference');
        }
        if (accountNumber !== undefined && accountNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNumber, 'accountNumber');
        }
        if (accountType !== undefined && accountType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountType, 'accountType');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<AccountingTransactionPairListModel>(`${this.configuration.basePath}/finance/v1/accounts/aggregate-pairs-daily`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Aggregates transactions by timestamp for all accounts and a given period.
     * Returns credited and debited amounts aggregated by transactions\&#39; timestamp for all accounts and a given period.  Stores an entry in the export audit log.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Specifies the property for which transactions will be exported
     * @param from The inclusive start time of the posting date.  Either posting date or business date interval should be specified.&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param to The exclusive end time of the posting date.  Either posting date or business date interval should be specified.&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param accountNumber Filter transactions by account number
     * @param accountType Filter transactions by type
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsAggregatePost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<AggregateTransactionListModel>;
    public financeAccountsAggregatePost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<AggregateTransactionListModel>>;
    public financeAccountsAggregatePost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<AggregateTransactionListModel>>;
    public financeAccountsAggregatePost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsAggregatePost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsAggregatePost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsAggregatePost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (accountNumber !== undefined && accountNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNumber, 'accountNumber');
        }
        if (accountType !== undefined && accountType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountType, 'accountType');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<AggregateTransactionListModel>(`${this.configuration.basePath}/finance/v1/accounts/aggregate`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns one account.
     * Returns one account, as specified by its number and the property.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param number The account number
     * @param propertyId Specifies the property the account is in.
     * @param transactionLimit Limit how many transactions should be included in the view (between 0 and 50, defaults to 0).
     * @param includeArchived If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsByNumberGet(number: string, propertyId: string, transactionLimit?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FinanceAccountModel>;
    public financeAccountsByNumberGet(number: string, propertyId: string, transactionLimit?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FinanceAccountModel>>;
    public financeAccountsByNumberGet(number: string, propertyId: string, transactionLimit?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FinanceAccountModel>>;
    public financeAccountsByNumberGet(number: string, propertyId: string, transactionLimit?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (number === null || number === undefined) {
            throw new Error('Required parameter number was null or undefined when calling financeAccountsByNumberGet.');
        }
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsByNumberGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (transactionLimit !== undefined && transactionLimit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>transactionLimit, 'transactionLimit');
        }
        if (includeArchived !== undefined && includeArchived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeArchived, 'includeArchived');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FinanceAccountModel>(`${this.configuration.basePath}/finance/v1/accounts/${encodeURIComponent(String(number))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of child accounts for a specified parent account.
     * &lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Filter account list by property id
     * @param parent Filter account list by the parent account\&#39;s number.
     * @param languageCode The language for the the report
     * @param accountingSchema Allows to override the default accounting schema
     * @param includeArchived If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsChildAccountsGet(propertyId: string, parent: string, languageCode?: string, accountingSchema?: 'Simple' | 'Extended', includeArchived?: boolean, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FinanceAccountListModel>;
    public financeAccountsChildAccountsGet(propertyId: string, parent: string, languageCode?: string, accountingSchema?: 'Simple' | 'Extended', includeArchived?: boolean, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FinanceAccountListModel>>;
    public financeAccountsChildAccountsGet(propertyId: string, parent: string, languageCode?: string, accountingSchema?: 'Simple' | 'Extended', includeArchived?: boolean, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FinanceAccountListModel>>;
    public financeAccountsChildAccountsGet(propertyId: string, parent: string, languageCode?: string, accountingSchema?: 'Simple' | 'Extended', includeArchived?: boolean, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsChildAccountsGet.');
        }
        if (parent === null || parent === undefined) {
            throw new Error('Required parameter parent was null or undefined when calling financeAccountsChildAccountsGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (parent !== undefined && parent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parent, 'parent');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (includeArchived !== undefined && includeArchived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeArchived, 'includeArchived');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FinanceAccountListModel>(`${this.configuration.basePath}/finance/v1/accounts/child-accounts`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns transactions filtered by date (business day) for a property for a given period.
     * Returns the raw transaction data for a given property and time period.  Stores an entry in the export audit log.&lt;br&gt;You must have at least one of these scopes: \&#39;transactions.export, accounting.read\&#39;.
     * @param propertyId Specifies the property transactions will be aggregated for.
     * @param from The inclusive start date of the interval
     * @param to The exclusive end date of the interval
     * @param reference Filter transactions by reference (reservation id/external folio id/property id for house folio).
     * @param accountNumber Filter transactions by account number
     * @param accountType Filter transactions by type
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report (2-letter ISO code)
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsExportDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<AccountingTransactionListModel>;
    public financeAccountsExportDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<AccountingTransactionListModel>>;
    public financeAccountsExportDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<AccountingTransactionListModel>>;
    public financeAccountsExportDailyPost(propertyId: string, from: string, to: string, reference?: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsExportDailyPost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsExportDailyPost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsExportDailyPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (reference !== undefined && reference !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reference, 'reference');
        }
        if (accountNumber !== undefined && accountNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNumber, 'accountNumber');
        }
        if (accountType !== undefined && accountType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountType, 'accountType');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<AccountingTransactionListModel>(`${this.configuration.basePath}/finance/v1/accounts/export-daily`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns gross transactions filtered by date (business day) for a property for a given period.
     * Returns the raw transaction data for a given property and time period.  Stores an entry in the export audit log.&lt;br&gt;You must have at least one of these scopes: \&#39;transactions.export, accounting.read\&#39;.
     * @param propertyId Specifies the property transactions will be aggregated for.
     * @param from The inclusive start date of the interval
     * @param to The exclusive end date of the interval
     * @param reference Filter transactions by reference (reservation id/external folio id/property id for house folio).
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsExportGrossDailyPost(propertyId: string, from: string, to: string, reference?: string, accountingSchema?: 'Simple' | 'Extended', idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ExportGrossTransactionListModel>;
    public financeAccountsExportGrossDailyPost(propertyId: string, from: string, to: string, reference?: string, accountingSchema?: 'Simple' | 'Extended', idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ExportGrossTransactionListModel>>;
    public financeAccountsExportGrossDailyPost(propertyId: string, from: string, to: string, reference?: string, accountingSchema?: 'Simple' | 'Extended', idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ExportGrossTransactionListModel>>;
    public financeAccountsExportGrossDailyPost(propertyId: string, from: string, to: string, reference?: string, accountingSchema?: 'Simple' | 'Extended', idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsExportGrossDailyPost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsExportGrossDailyPost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsExportGrossDailyPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (reference !== undefined && reference !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reference, 'reference');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<ExportGrossTransactionListModel>(`${this.configuration.basePath}/finance/v1/accounts/export-gross-daily`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns transactions filtered by timestamp for a property for a given period.
     * Returns the raw transaction data for a given property and time period.  Stores an entry in the export audit log.&lt;br&gt;You must have at least one of these scopes: \&#39;transactions.export, accounting.read\&#39;.
     * @param propertyId Specifies the property for which transactions will be exported
     * @param from The inclusive start time of the posting date.  Either posting date or business date interval should be specified.&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param to The exclusive end time of the posting date.  Either posting date or business date interval should be specified.&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param accountNumber Filter transactions by account number
     * @param accountType Filter transactions by type
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsExportPost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<AccountingTransactionListModel>;
    public financeAccountsExportPost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<AccountingTransactionListModel>>;
    public financeAccountsExportPost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<AccountingTransactionListModel>>;
    public financeAccountsExportPost(propertyId: string, from: string, to: string, accountNumber?: string, accountType?: 'Revenues' | 'Payments' | 'Liabilities' | 'Receivables' | 'Vat' | 'House' | 'AccountsReceivable' | 'CityTaxes' | 'TransitoryItems' | 'VatOnLiabilities' | 'LossOfAccountsReceivable', accountingSchema?: 'Simple' | 'Extended', languageCode?: string, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsExportPost.');
        }
        if (from === null || from === undefined) {
            throw new Error('Required parameter from was null or undefined when calling financeAccountsExportPost.');
        }
        if (to === null || to === undefined) {
            throw new Error('Required parameter to was null or undefined when calling financeAccountsExportPost.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (accountNumber !== undefined && accountNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountNumber, 'accountNumber');
        }
        if (accountType !== undefined && accountType !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountType, 'accountType');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<AccountingTransactionListModel>(`${this.configuration.basePath}/finance/v1/accounts/export`,
            null,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the chart of accounts of the subledger.
     * Returns the schema of subledger, split into global and guest ledger.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Filter account list by property ID
     * @param depth How many hierarchy levels to include (between 1 and 4, default is 1).
     * @param includeArchived If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts
     * @param accountingSchema Allows to override the default accounting schema. Only specify this, when you know what you are doing.
     * @param languageCode The language for the the report. If not specified, language code from \&quot;Accept-Language\&quot; will be used.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeAccountsSchemaGet(propertyId: string, depth?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ChartOfAccountsModel>;
    public financeAccountsSchemaGet(propertyId: string, depth?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ChartOfAccountsModel>>;
    public financeAccountsSchemaGet(propertyId: string, depth?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ChartOfAccountsModel>>;
    public financeAccountsSchemaGet(propertyId: string, depth?: number, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeAccountsSchemaGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (depth !== undefined && depth !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>depth, 'depth');
        }
        if (includeArchived !== undefined && includeArchived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeArchived, 'includeArchived');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ChartOfAccountsModel>(`${this.configuration.basePath}/finance/v1/accounts/schema`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of external accounts.
     * Returns a list of accounts in one property for a folio.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Filter account list by property id
     * @param folioId Filter account list by folio id
     * @param parent Filter account list by the parent account\&#39;s number.
     * @param languageCode The language for the the report
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeExternalAccountsGet(propertyId: string, folioId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FinanceAccountListModel>;
    public financeExternalAccountsGet(propertyId: string, folioId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FinanceAccountListModel>>;
    public financeExternalAccountsGet(propertyId: string, folioId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FinanceAccountListModel>>;
    public financeExternalAccountsGet(propertyId: string, folioId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeExternalAccountsGet.');
        }
        if (folioId === null || folioId === undefined) {
            throw new Error('Required parameter folioId was null or undefined when calling financeExternalAccountsGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (folioId !== undefined && folioId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>folioId, 'folioId');
        }
        if (parent !== undefined && parent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parent, 'parent');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FinanceAccountListModel>(`${this.configuration.basePath}/finance/v1/external-accounts`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of global accounts.
     * Returns a list of accounts in one property, having the same global account as parent.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Filter account list by property ID
     * @param parent Filter account list by the parent account\&#39;s number.
     * @param includeArchived If set to true, also includes archived accounts. If not set, or set to false, it only returns non-archived accounts
     * @param accountingSchema Allows to override the default accounting schema
     * @param languageCode The language for the the report
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeGlobalAccountsGet(propertyId: string, parent: string, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FinanceAccountListModel>;
    public financeGlobalAccountsGet(propertyId: string, parent: string, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FinanceAccountListModel>>;
    public financeGlobalAccountsGet(propertyId: string, parent: string, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FinanceAccountListModel>>;
    public financeGlobalAccountsGet(propertyId: string, parent: string, includeArchived?: boolean, accountingSchema?: 'Simple' | 'Extended', languageCode?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeGlobalAccountsGet.');
        }
        if (parent === null || parent === undefined) {
            throw new Error('Required parameter parent was null or undefined when calling financeGlobalAccountsGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (parent !== undefined && parent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parent, 'parent');
        }
        if (includeArchived !== undefined && includeArchived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeArchived, 'includeArchived');
        }
        if (accountingSchema !== undefined && accountingSchema !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>accountingSchema, 'accountingSchema');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FinanceAccountListModel>(`${this.configuration.basePath}/finance/v1/global-accounts`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of guest accounts.
     * Returns a list of accounts in one property for a reservation.&lt;br&gt;You must have at least one of these scopes: \&#39;subledger.read, accounting.read\&#39;.
     * @param propertyId Filter account list by property id
     * @param reservationId Filter account list by reservation id
     * @param parent Filter account list by the parent account\&#39;s number.
     * @param languageCode The language for the the report
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public financeGuestAccountsGet(propertyId: string, reservationId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<FinanceAccountListModel>;
    public financeGuestAccountsGet(propertyId: string, reservationId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<FinanceAccountListModel>>;
    public financeGuestAccountsGet(propertyId: string, reservationId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<FinanceAccountListModel>>;
    public financeGuestAccountsGet(propertyId: string, reservationId: string, parent?: string, languageCode?: string, pageNumber?: number, pageSize?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling financeGuestAccountsGet.');
        }
        if (reservationId === null || reservationId === undefined) {
            throw new Error('Required parameter reservationId was null or undefined when calling financeGuestAccountsGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (reservationId !== undefined && reservationId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>reservationId, 'reservationId');
        }
        if (parent !== undefined && parent !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>parent, 'parent');
        }
        if (languageCode !== undefined && languageCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>languageCode, 'languageCode');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<FinanceAccountListModel>(`${this.configuration.basePath}/finance/v1/guest-accounts`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
