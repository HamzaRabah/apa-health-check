/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';
// @ts-ignore
import { ReservationChangeLogListModel } from '../model/reservationChangeLogListModel';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class BookingLogsService {

    protected basePath = 'https://api.apaleo.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Returns reservation change log entries sorted by the timestamp.
     * &lt;br&gt;You must have this scope: \&#39;logs.read\&#39;.
     * @param reservationIds Filter the log entries by reservation IDs
     * @param eventTypes Filter the log entries by event types.
     * @param clientIds Filter the log entries by client IDs (which application triggered this event)
     * @param propertyIds Filter the log entries by property IDs
     * @param subjectIds Filter the log entries by subject IDs (which user triggered this event)
     * @param dateFilter Filter by event date and time&lt;br /&gt;You can provide an array of string expressions which all need to apply.&lt;br /&gt;Each expression has the form of \&#39;OPERATION_VALUE\&#39; where VALUE needs to be of the valid format of the property type and OPERATION can be:&lt;br /&gt;\&#39;eq\&#39; for equals&lt;br /&gt;\&#39;neq\&#39; for not equals&lt;br /&gt;\&#39;lt\&#39; for less than&lt;br /&gt;\&#39;gt\&#39; for greater than&lt;br /&gt;\&#39;lte\&#39; for less than or equals&lt;br /&gt;\&#39;gte\&#39; for greater than or equals&lt;br /&gt;For instance&lt;br /&gt;\&#39;eq_5\&#39; would mean the value should equal 5&lt;br /&gt;\&#39;lte_7\&#39; would mean the value should be less than or equal to 7
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: changes. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public logsBookingReservationGet(reservationIds?: Array<string>, eventTypes?: Array<'Created' | 'Amended' | 'CheckedIn' | 'CheckedOut' | 'Canceled' | 'SetToNoShow' | 'CityTaxAdded' | 'CityTaxRemoved' | 'UnitAssigned' | 'UnitUnassigned' | 'PaymentAccountSet' | 'PaymentAccountRemoved' | 'InvoiceStatusChanged' | 'Changed'>, clientIds?: Array<string>, propertyIds?: Array<string>, subjectIds?: Array<string>, dateFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'changes'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReservationChangeLogListModel>;
    public logsBookingReservationGet(reservationIds?: Array<string>, eventTypes?: Array<'Created' | 'Amended' | 'CheckedIn' | 'CheckedOut' | 'Canceled' | 'SetToNoShow' | 'CityTaxAdded' | 'CityTaxRemoved' | 'UnitAssigned' | 'UnitUnassigned' | 'PaymentAccountSet' | 'PaymentAccountRemoved' | 'InvoiceStatusChanged' | 'Changed'>, clientIds?: Array<string>, propertyIds?: Array<string>, subjectIds?: Array<string>, dateFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'changes'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReservationChangeLogListModel>>;
    public logsBookingReservationGet(reservationIds?: Array<string>, eventTypes?: Array<'Created' | 'Amended' | 'CheckedIn' | 'CheckedOut' | 'Canceled' | 'SetToNoShow' | 'CityTaxAdded' | 'CityTaxRemoved' | 'UnitAssigned' | 'UnitUnassigned' | 'PaymentAccountSet' | 'PaymentAccountRemoved' | 'InvoiceStatusChanged' | 'Changed'>, clientIds?: Array<string>, propertyIds?: Array<string>, subjectIds?: Array<string>, dateFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'changes'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReservationChangeLogListModel>>;
    public logsBookingReservationGet(reservationIds?: Array<string>, eventTypes?: Array<'Created' | 'Amended' | 'CheckedIn' | 'CheckedOut' | 'Canceled' | 'SetToNoShow' | 'CityTaxAdded' | 'CityTaxRemoved' | 'UnitAssigned' | 'UnitUnassigned' | 'PaymentAccountSet' | 'PaymentAccountRemoved' | 'InvoiceStatusChanged' | 'Changed'>, clientIds?: Array<string>, propertyIds?: Array<string>, subjectIds?: Array<string>, dateFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'changes'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (reservationIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                reservationIds.join(COLLECTION_FORMATS['csv']), 'reservationIds');
        }
        if (eventTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                eventTypes.join(COLLECTION_FORMATS['csv']), 'eventTypes');
        }
        if (clientIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                clientIds.join(COLLECTION_FORMATS['csv']), 'clientIds');
        }
        if (propertyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                propertyIds.join(COLLECTION_FORMATS['csv']), 'propertyIds');
        }
        if (subjectIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                subjectIds.join(COLLECTION_FORMATS['csv']), 'subjectIds');
        }
        if (dateFilter) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                dateFilter.join(COLLECTION_FORMATS['csv']), 'dateFilter');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ReservationChangeLogListModel>(`${this.configuration.basePath}/logs/v1/booking/reservation`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
