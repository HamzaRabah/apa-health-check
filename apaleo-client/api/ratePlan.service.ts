/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CountModel } from '../model/countModel';
// @ts-ignore
import { CreateRatePlanModel } from '../model/createRatePlanModel';
// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';
// @ts-ignore
import { Operation } from '../model/operation';
// @ts-ignore
import { RatePlanCreatedModel } from '../model/ratePlanCreatedModel';
// @ts-ignore
import { RatePlanListModel } from '../model/ratePlanListModel';
// @ts-ignore
import { RatePlanModel } from '../model/ratePlanModel';
// @ts-ignore
import { ReplaceRatePlanModel } from '../model/replaceRatePlanModel';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class RatePlanService {

    protected basePath = 'https://api.apaleo.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Delete a rate plan
     * Use this call to delete a rate plan.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.delete, setup.manage\&#39;.
     * @param id The id of the rate plan.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansByIdDelete(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public rateplanRatePlansByIdDelete(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public rateplanRatePlansByIdDelete(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public rateplanRatePlansByIdDelete(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rateplanRatePlansByIdDelete.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rateplan/v1/rate-plans/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a rate plan
     * Get a rate plan by id.&lt;br /&gt;&lt;br /&gt;                To be able to read a corporate rate plan a client must additionaly have  \&#39;rateplans.read-corporate\&#39; scope assigned.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.read, setup.read, setup.manage\&#39;.
     * @param id The id of the rate plan.
     * @param languages \&#39;all\&#39; or comma separated list of two-letter language codes (ISO Alpha-2)
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, cancellationPolicy. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansByIdGet(id: string, languages?: Array<string>, expand?: Array<'property' | 'cancellationPolicy'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<RatePlanModel>;
    public rateplanRatePlansByIdGet(id: string, languages?: Array<string>, expand?: Array<'property' | 'cancellationPolicy'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<RatePlanModel>>;
    public rateplanRatePlansByIdGet(id: string, languages?: Array<string>, expand?: Array<'property' | 'cancellationPolicy'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<RatePlanModel>>;
    public rateplanRatePlansByIdGet(id: string, languages?: Array<string>, expand?: Array<'property' | 'cancellationPolicy'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rateplanRatePlansByIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (languages) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                languages.join(COLLECTION_FORMATS['csv']), 'languages');
        }
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<RatePlanModel>(`${this.configuration.basePath}/rateplan/v1/rate-plans/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Check if a rate plan exists
     * Check if a rate plan exists by id.&lt;br /&gt;&lt;br /&gt;                To be able to check if a corporate rate plan exists  a client must additionaly have \&#39;rateplans.read-corporate\&#39; scope assigned.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.read, setup.read, setup.manage\&#39;.
     * @param id The id of the rate plan.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansByIdHead(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any>;
    public rateplanRatePlansByIdHead(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpResponse<any>>;
    public rateplanRatePlansByIdHead(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<HttpEvent<any>>;
    public rateplanRatePlansByIdHead(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: undefined, context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rateplanRatePlansByIdHead.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.head<any>(`${this.configuration.basePath}/rateplan/v1/rate-plans/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Replace a rate plan
     * Use this call to modify a rate plan.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.manage, setup.manage\&#39;.
     * @param id The id of the rate plan.
     * @param body The definition of the rate plan.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansByIdPut(id: string, body: ReplaceRatePlanModel, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public rateplanRatePlansByIdPut(id: string, body: ReplaceRatePlanModel, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public rateplanRatePlansByIdPut(id: string, body: ReplaceRatePlanModel, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public rateplanRatePlansByIdPut(id: string, body: ReplaceRatePlanModel, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling rateplanRatePlansByIdPut.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rateplanRatePlansByIdPut.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.put<any>(`${this.configuration.basePath}/rateplan/v1/rate-plans/${encodeURIComponent(String(id))}`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete multiple rate plans
     * Use this call to delete multiple rate plans.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.delete, setup.manage\&#39;.
     * @param ratePlanIds The ids of the rate plans.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansDelete(ratePlanIds: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public rateplanRatePlansDelete(ratePlanIds: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public rateplanRatePlansDelete(ratePlanIds: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public rateplanRatePlansDelete(ratePlanIds: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ratePlanIds === null || ratePlanIds === undefined) {
            throw new Error('Required parameter ratePlanIds was null or undefined when calling rateplanRatePlansDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ratePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanIds.join(COLLECTION_FORMATS['csv']), 'ratePlanIds');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/rateplan/v1/rate-plans`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a rate plan list
     * Get the list of rate plans depending on client scopes.&lt;br /&gt;&lt;br /&gt;                If a client has no additional scopes, only public rate plans are returned.&lt;br /&gt;  The \&#39;rateplans.read-corporate\&#39; scope adds corporate rate plans to the response.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.read, setup.read, setup.manage\&#39;.
     * @param propertyId Return rate plans for the specific property
     * @param ratePlanCodes Return rate plans filtered by requested codes
     * @param includedServiceIds Return rate plans that have any of the requested included services
     * @param channelCodes Return rate plans that are sold though any of the specified channels
     * @param promoCodes Return rate plans that have any of the requested promo codes
     * @param companyIds Return rate plans filtered by requested companies
     * @param baseRatePlanIds Return rate plans derived from any of the specified rate plans
     * @param unitGroupIds Return rate plans with any of the specified unit groups
     * @param timeSliceDefinitionIds Return rate plans with any of the specified time slice definitions
     * @param unitGroupTypes Return rate plans with any of the specified unit group types
     * @param timeSliceTemplate The time slice template, defaults to \&#39;over night\&#39;
     * @param minGuaranteeTypes Return rate plans with any of the specified min guarantee types
     * @param cancellationPolicyIds Return rate plans with any of the specified cancellation policies
     * @param noShowPolicyIds Return rate plans with any of the specified no-show policies
     * @param isDerived Return only derived or base rate plans
     * @param derivationLevelFilter This will filter rate plans based on their derivation level.&lt;br /&gt;You can provide an array of string expressions which all need to apply.&lt;br /&gt;Each expression has the form of \&#39;OPERATION_VALUE\&#39; where VALUE needs to be of the valid format of the property type and OPERATION can be:&lt;br /&gt;\&#39;eq\&#39; for equals&lt;br /&gt;\&#39;neq\&#39; for not equals&lt;br /&gt;\&#39;lt\&#39; for less than&lt;br /&gt;\&#39;gt\&#39; for greater than&lt;br /&gt;\&#39;lte\&#39; for less than or equals&lt;br /&gt;\&#39;gte\&#39; for greater than or equals&lt;br /&gt;For instance&lt;br /&gt;\&#39;eq_5\&#39; would mean the value should equal 5&lt;br /&gt;\&#39;lte_7\&#39; would mean the value should be less than or equal to 7
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: property, unitGroup, cancellationPolicy, services, bookingPeriods, surcharges, ageCategories. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'property' | 'unitGroup' | 'cancellationPolicy' | 'services' | 'bookingPeriods' | 'surcharges' | 'ageCategories'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<RatePlanListModel>;
    public rateplanRatePlansGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'property' | 'unitGroup' | 'cancellationPolicy' | 'services' | 'bookingPeriods' | 'surcharges' | 'ageCategories'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<RatePlanListModel>>;
    public rateplanRatePlansGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'property' | 'unitGroup' | 'cancellationPolicy' | 'services' | 'bookingPeriods' | 'surcharges' | 'ageCategories'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<RatePlanListModel>>;
    public rateplanRatePlansGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, pageNumber?: number, pageSize?: number, expand?: Array<'property' | 'unitGroup' | 'cancellationPolicy' | 'services' | 'bookingPeriods' | 'surcharges' | 'ageCategories'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (ratePlanCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanCodes.join(COLLECTION_FORMATS['csv']), 'ratePlanCodes');
        }
        if (includedServiceIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                includedServiceIds.join(COLLECTION_FORMATS['csv']), 'includedServiceIds');
        }
        if (channelCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                channelCodes.join(COLLECTION_FORMATS['csv']), 'channelCodes');
        }
        if (promoCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                promoCodes.join(COLLECTION_FORMATS['csv']), 'promoCodes');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (baseRatePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                baseRatePlanIds.join(COLLECTION_FORMATS['csv']), 'baseRatePlanIds');
        }
        if (unitGroupIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupIds.join(COLLECTION_FORMATS['csv']), 'unitGroupIds');
        }
        if (timeSliceDefinitionIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                timeSliceDefinitionIds.join(COLLECTION_FORMATS['csv']), 'timeSliceDefinitionIds');
        }
        if (unitGroupTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupTypes.join(COLLECTION_FORMATS['csv']), 'unitGroupTypes');
        }
        if (timeSliceTemplate !== undefined && timeSliceTemplate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeSliceTemplate, 'timeSliceTemplate');
        }
        if (minGuaranteeTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                minGuaranteeTypes.join(COLLECTION_FORMATS['csv']), 'minGuaranteeTypes');
        }
        if (cancellationPolicyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                cancellationPolicyIds.join(COLLECTION_FORMATS['csv']), 'cancellationPolicyIds');
        }
        if (noShowPolicyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                noShowPolicyIds.join(COLLECTION_FORMATS['csv']), 'noShowPolicyIds');
        }
        if (isDerived !== undefined && isDerived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isDerived, 'isDerived');
        }
        if (derivationLevelFilter) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                derivationLevelFilter.join(COLLECTION_FORMATS['csv']), 'derivationLevelFilter');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<RatePlanListModel>(`${this.configuration.basePath}/rateplan/v1/rate-plans`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Allows to patch one or more rate plans
     * Here is the list of operations that are currently allowed:  - Replace Name  - Replace Description  - Replace MinGuaranteeType  - Replace PriceCalculationMode  - Replace CancellationPolicy  - Replace NoShowPolicy  - Replace ChannelCodes  - Replace Companies  - Add, replace and remove PromoCode  - Add, replace and remove Restrictions  - Add, replace and remove BookingPeriods  - Add, replace and remove IsSubjectToCityTax  - Add, replace and remove PricingRule  - Add, replace and remove Surcharges  - Add, replace and remove AgeCategories  - Add, replace and remove IncludedServices  - Add/Replace/Remove/Update AccountingConfigs&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.manage, setup.manage\&#39;.
     * @param ratePlanIds Comma separated list of rate plan IDs, at least one.
     * @param body Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansPatch(ratePlanIds: Array<string>, body: Array<Operation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public rateplanRatePlansPatch(ratePlanIds: Array<string>, body: Array<Operation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public rateplanRatePlansPatch(ratePlanIds: Array<string>, body: Array<Operation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public rateplanRatePlansPatch(ratePlanIds: Array<string>, body: Array<Operation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (ratePlanIds === null || ratePlanIds === undefined) {
            throw new Error('Required parameter ratePlanIds was null or undefined when calling rateplanRatePlansPatch.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rateplanRatePlansPatch.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ratePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanIds.join(COLLECTION_FORMATS['csv']), 'ratePlanIds');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.patch<any>(`${this.configuration.basePath}/rateplan/v1/rate-plans`,
            body,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a rate plan
     * Use this call to create a new rate plan. The rate plan will already contain empty rates, fill them later using PUT rates.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.create, setup.manage\&#39;.
     * @param body The definition of the rate plan.
     * @param idempotencyKey Unique key for safely retrying requests without accidentally performing the same operation twice.  We\&#39;ll always send back the same response for requests made with the same key,  and keys can\&#39;t be reused with different request parameters. Keys expire after 24 hours.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlansPost(body: CreateRatePlanModel, idempotencyKey?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<RatePlanCreatedModel>;
    public rateplanRatePlansPost(body: CreateRatePlanModel, idempotencyKey?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<RatePlanCreatedModel>>;
    public rateplanRatePlansPost(body: CreateRatePlanModel, idempotencyKey?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<RatePlanCreatedModel>>;
    public rateplanRatePlansPost(body: CreateRatePlanModel, idempotencyKey?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling rateplanRatePlansPost.');
        }

        let localVarHeaders = this.defaultHeaders;
        if (idempotencyKey !== undefined && idempotencyKey !== null) {
            localVarHeaders = localVarHeaders.set('Idempotency-Key', String(idempotencyKey));
        }

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.post<RatePlanCreatedModel>(`${this.configuration.basePath}/rateplan/v1/rate-plans`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns number of rate plans
     * Returns number of rate plans matching the filter criteria, and depending on client scopes&lt;br /&gt;&lt;br /&gt;                If a client has no additional scopes, only public rate plans are counted.&lt;br /&gt;  The \&#39;rateplans.read-corporate\&#39; scope adds corporate rate plans to the result number.&lt;br&gt;You must have at least one of these scopes: \&#39;rateplans.read, setup.read, setup.manage\&#39;.
     * @param propertyId Return rate plans for the specific property
     * @param ratePlanCodes Return rate plans filtered by requested codes
     * @param includedServiceIds Return rate plans that have any of the requested included services
     * @param channelCodes Return rate plans that are sold though any of the specified channels
     * @param promoCodes Return rate plans that have any of the requested promo codes
     * @param companyIds Return rate plans filtered by requested companies
     * @param baseRatePlanIds Return rate plans derived from any of the specified rate plans
     * @param unitGroupIds Return rate plans with any of the specified unit groups
     * @param timeSliceDefinitionIds Return rate plans with any of the specified time slice definitions
     * @param unitGroupTypes Return rate plans with any of the specified unit group types
     * @param timeSliceTemplate The time slice template, defaults to \&#39;over night\&#39;
     * @param minGuaranteeTypes Return rate plans with any of the specified min guarantee types
     * @param cancellationPolicyIds Return rate plans with any of the specified cancellation policies
     * @param noShowPolicyIds Return rate plans with any of the specified no-show policies
     * @param isDerived Return only derived or base rate plans
     * @param derivationLevelFilter This will filter rate plans based on their derivation level.&lt;br /&gt;You can provide an array of string expressions which all need to apply.&lt;br /&gt;Each expression has the form of \&#39;OPERATION_VALUE\&#39; where VALUE needs to be of the valid format of the property type and OPERATION can be:&lt;br /&gt;\&#39;eq\&#39; for equals&lt;br /&gt;\&#39;neq\&#39; for not equals&lt;br /&gt;\&#39;lt\&#39; for less than&lt;br /&gt;\&#39;gt\&#39; for greater than&lt;br /&gt;\&#39;lte\&#39; for less than or equals&lt;br /&gt;\&#39;gte\&#39; for greater than or equals&lt;br /&gt;For instance&lt;br /&gt;\&#39;eq_5\&#39; would mean the value should equal 5&lt;br /&gt;\&#39;lte_7\&#39; would mean the value should be less than or equal to 7
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public rateplanRatePlanscountGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<CountModel>;
    public rateplanRatePlanscountGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<CountModel>>;
    public rateplanRatePlanscountGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<CountModel>>;
    public rateplanRatePlanscountGet(propertyId?: string, ratePlanCodes?: Array<string>, includedServiceIds?: Array<string>, channelCodes?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, promoCodes?: Array<string>, companyIds?: Array<string>, baseRatePlanIds?: Array<string>, unitGroupIds?: Array<string>, timeSliceDefinitionIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, timeSliceTemplate?: 'DayUse' | 'OverNight', minGuaranteeTypes?: Array<'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company'>, cancellationPolicyIds?: Array<string>, noShowPolicyIds?: Array<string>, isDerived?: boolean, derivationLevelFilter?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (propertyId !== undefined && propertyId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>propertyId, 'propertyId');
        }
        if (ratePlanCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanCodes.join(COLLECTION_FORMATS['csv']), 'ratePlanCodes');
        }
        if (includedServiceIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                includedServiceIds.join(COLLECTION_FORMATS['csv']), 'includedServiceIds');
        }
        if (channelCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                channelCodes.join(COLLECTION_FORMATS['csv']), 'channelCodes');
        }
        if (promoCodes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                promoCodes.join(COLLECTION_FORMATS['csv']), 'promoCodes');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (baseRatePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                baseRatePlanIds.join(COLLECTION_FORMATS['csv']), 'baseRatePlanIds');
        }
        if (unitGroupIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupIds.join(COLLECTION_FORMATS['csv']), 'unitGroupIds');
        }
        if (timeSliceDefinitionIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                timeSliceDefinitionIds.join(COLLECTION_FORMATS['csv']), 'timeSliceDefinitionIds');
        }
        if (unitGroupTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupTypes.join(COLLECTION_FORMATS['csv']), 'unitGroupTypes');
        }
        if (timeSliceTemplate !== undefined && timeSliceTemplate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>timeSliceTemplate, 'timeSliceTemplate');
        }
        if (minGuaranteeTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                minGuaranteeTypes.join(COLLECTION_FORMATS['csv']), 'minGuaranteeTypes');
        }
        if (cancellationPolicyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                cancellationPolicyIds.join(COLLECTION_FORMATS['csv']), 'cancellationPolicyIds');
        }
        if (noShowPolicyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                noShowPolicyIds.join(COLLECTION_FORMATS['csv']), 'noShowPolicyIds');
        }
        if (isDerived !== undefined && isDerived !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>isDerived, 'isDerived');
        }
        if (derivationLevelFilter) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                derivationLevelFilter.join(COLLECTION_FORMATS['csv']), 'derivationLevelFilter');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<CountModel>(`${this.configuration.basePath}/rateplan/v1/rate-plans/$count`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
