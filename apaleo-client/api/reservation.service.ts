/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { CountModel } from '../model/countModel';
// @ts-ignore
import { MessageItemCollection } from '../model/messageItemCollection';
// @ts-ignore
import { Operation } from '../model/operation';
// @ts-ignore
import { ReservationListModel } from '../model/reservationListModel';
// @ts-ignore
import { ReservationModel } from '../model/reservationModel';
// @ts-ignore
import { ReservationServiceListModel } from '../model/reservationServiceListModel';
// @ts-ignore
import { ReservationStayOffersModel } from '../model/reservationStayOffersModel';
// @ts-ignore
import { ServiceOffersModel } from '../model/serviceOffersModel';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class ReservationService {

    protected basePath = 'http://api.apaleo.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }


    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substr(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Returns a specific reservation.
     * Retrieves a reservation, specified by its ID.&lt;br&gt;You must have at least one of these scopes: \&#39;reservations.read, reservations.manage\&#39;.
     * @param id Id of the reservation to be retrieved.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: timeSlices, services, booker, actions, company, assignedUnits. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdGet(id: string, expand?: Array<'timeSlices' | 'services' | 'booker' | 'actions' | 'company' | 'assignedUnits'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReservationModel>;
    public bookingReservationsByIdGet(id: string, expand?: Array<'timeSlices' | 'services' | 'booker' | 'actions' | 'company' | 'assignedUnits'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReservationModel>>;
    public bookingReservationsByIdGet(id: string, expand?: Array<'timeSlices' | 'services' | 'booker' | 'actions' | 'company' | 'assignedUnits'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReservationModel>>;
    public bookingReservationsByIdGet(id: string, expand?: Array<'timeSlices' | 'services' | 'booker' | 'actions' | 'company' | 'assignedUnits'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ReservationModel>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns offers for one specific reservation.
     * Calculates and returns offers for amending a specific reservation.&lt;br&gt;You must have at least one of these scopes: \&#39;offers.read, reservations.manage\&#39;.
     * @param id Id of the reservation to be amended.
     * @param arrival Date and optional time of arrival&lt;br /&gt;Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param departure Date and optional time of departure. Cannot be more than 5 years after arrival.&lt;br /&gt;Specify either a pure date or a date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param adults Number of adults
     * @param childrenAges Ages of children
     * @param channelCode The channel code used to filter the rate plans
     * @param promoCode The promo code associated with a certain special offer, like corporate rate
     * @param requote Whether the offers should be re-quoted based on current prices, or only additions like change of number of adults should be calculated.  Defaults to \&#39;false\&#39;
     * @param includeUnavailable Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned
     * @param unitGroupIds The list of unit groups used to filter the offers.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdOffersGet(id: string, arrival?: string, departure?: string, adults?: number, childrenAges?: Array<number>, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', promoCode?: string, requote?: boolean, includeUnavailable?: boolean, unitGroupIds?: Array<string>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReservationStayOffersModel>;
    public bookingReservationsByIdOffersGet(id: string, arrival?: string, departure?: string, adults?: number, childrenAges?: Array<number>, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', promoCode?: string, requote?: boolean, includeUnavailable?: boolean, unitGroupIds?: Array<string>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReservationStayOffersModel>>;
    public bookingReservationsByIdOffersGet(id: string, arrival?: string, departure?: string, adults?: number, childrenAges?: Array<number>, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', promoCode?: string, requote?: boolean, includeUnavailable?: boolean, unitGroupIds?: Array<string>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReservationStayOffersModel>>;
    public bookingReservationsByIdOffersGet(id: string, arrival?: string, departure?: string, adults?: number, childrenAges?: Array<number>, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', promoCode?: string, requote?: boolean, includeUnavailable?: boolean, unitGroupIds?: Array<string>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdOffersGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (arrival !== undefined && arrival !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>arrival, 'arrival');
        }
        if (departure !== undefined && departure !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>departure, 'departure');
        }
        if (adults !== undefined && adults !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>adults, 'adults');
        }
        if (childrenAges) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                childrenAges.join(COLLECTION_FORMATS['csv']), 'childrenAges');
        }
        if (channelCode !== undefined && channelCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>channelCode, 'channelCode');
        }
        if (promoCode !== undefined && promoCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>promoCode, 'promoCode');
        }
        if (requote !== undefined && requote !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>requote, 'requote');
        }
        if (includeUnavailable !== undefined && includeUnavailable !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeUnavailable, 'includeUnavailable');
        }
        if (unitGroupIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupIds.join(COLLECTION_FORMATS['csv']), 'unitGroupIds');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ReservationStayOffersModel>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}/offers`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Allows to modify certain reservation properties
     * Here is the list of operations that are currently allowed:  - Add, replace and remove Comment  - Add, replace and remove GuestComment  - Add, replace and remove PaymentAccount  - Add, replace and remove TravelPurpose  - Add, replace and remove AdditionalGuests  - Add a company (using company/Id, and only if not already set)  - Add, replace and remove Commission  - Replace PrimaryGuest  - Remove ValidationMessages&lt;br&gt;You must have this scope: \&#39;reservations.manage\&#39;.
     * @param id Id of the reservation to be modified.
     * @param body Define the list of operations to be applied to the resource. Learn more about JSON Patch here: http://jsonpatch.com/.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdPatch(id: string, body: Array<Operation>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public bookingReservationsByIdPatch(id: string, body: Array<Operation>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public bookingReservationsByIdPatch(id: string, body: Array<Operation>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public bookingReservationsByIdPatch(id: string, body: Array<Operation>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdPatch.');
        }
        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling bookingReservationsByIdPatch.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.patch<any>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}`,
            body,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns service offers for one specific reservation.
     * Calculates and returns service offers for a specific reservation.&lt;br&gt;You must have at least one of these scopes: \&#39;offers.read, reservations.manage\&#39;.
     * @param id Id of the reservation.
     * @param channelCode The channel code used to filter the services
     * @param onlyDefaultDates Depending on the postNextDay setting of a service it will by default be posted before or after midnight.  Breakfast is usually delivered on the next morning, so all the dates from the day after arrival to the departure day  are default dates and will have this flag set to true. For services like a dinner it is the other way around.  With this query parameter, you can also ask for the dates, that usually the service will not be booked. It defaults to true.
     * @param includeUnavailable Return also offers that are currently not publicly bookable as restrictions are violated. By default only available offers are returned
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdServiceOffersGet(id: string, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', onlyDefaultDates?: boolean, includeUnavailable?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ServiceOffersModel>;
    public bookingReservationsByIdServiceOffersGet(id: string, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', onlyDefaultDates?: boolean, includeUnavailable?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ServiceOffersModel>>;
    public bookingReservationsByIdServiceOffersGet(id: string, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', onlyDefaultDates?: boolean, includeUnavailable?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ServiceOffersModel>>;
    public bookingReservationsByIdServiceOffersGet(id: string, channelCode?: 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs', onlyDefaultDates?: boolean, includeUnavailable?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdServiceOffersGet.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (channelCode !== undefined && channelCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>channelCode, 'channelCode');
        }
        if (onlyDefaultDates !== undefined && onlyDefaultDates !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>onlyDefaultDates, 'onlyDefaultDates');
        }
        if (includeUnavailable !== undefined && includeUnavailable !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeUnavailable, 'includeUnavailable');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ServiceOffersModel>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}/service-offers`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Removes a service from a reservation.
     * Removes a service from a reservation. The service will not be removed if it is mandatory, already posted or if the service date is in the past.&lt;br&gt;You must have this scope: \&#39;reservations.manage\&#39;.
     * @param id Id of the reservation.
     * @param serviceId The id of the service to delete
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdServicesDelete(id: string, serviceId: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any>;
    public bookingReservationsByIdServicesDelete(id: string, serviceId: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<any>>;
    public bookingReservationsByIdServicesDelete(id: string, serviceId: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<any>>;
    public bookingReservationsByIdServicesDelete(id: string, serviceId: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdServicesDelete.');
        }
        if (serviceId === null || serviceId === undefined) {
            throw new Error('Required parameter serviceId was null or undefined when calling bookingReservationsByIdServicesDelete.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (serviceId !== undefined && serviceId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>serviceId, 'serviceId');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.delete<any>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}/services`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the services booked for a specific reservation.
     * Returns the services booked for a specific reservation.&lt;br&gt;You must have at least one of these scopes: \&#39;reservations.read, reservations.manage\&#39;.
     * @param id Id of the reservation.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsByIdServicesGet(id: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReservationServiceListModel>;
    public bookingReservationsByIdServicesGet(id: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReservationServiceListModel>>;
    public bookingReservationsByIdServicesGet(id: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReservationServiceListModel>>;
    public bookingReservationsByIdServicesGet(id: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling bookingReservationsByIdServicesGet.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ReservationServiceListModel>(`${this.configuration.basePath}/booking/v1/reservations/${encodeURIComponent(String(id))}/services`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns a list of all reservations, filtered by the specified parameters.
     * Returns a list of all reservations, filtered by the specified parameters. If no parameters are set, returns the entire list.&lt;br&gt;You must have at least one of these scopes: \&#39;reservations.read, reservations.manage\&#39;.
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param companyIds Filter result by requested companies
     * @param unitIds Filter result by assigned units
     * @param unitGroupIds Filter result by requested unit groups
     * @param unitGroupTypes Filter result by requested unit group types
     * @param blockIds Filter result by requested blocks
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the \&#39;To\&#39; and \&#39;From\&#39; attributes.  All filters will check if the date specified by the filter type is between from (included) and to (excluded).  The exception being filtering for \&#39;stay\&#39;, which will return all reservations that are overlapping with the interval specified by from and to.
     * @param from The start of the time interval. When filtering by date, at least one of \&#39;from\&#39; and \&#39;to\&#39; has to be specified&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param to The end of the time interval, must be larger than \&#39;from\&#39;. When filtering by date, at least one of \&#39;from\&#39; and \&#39;to\&#39; has to be specified&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param channelCode Filter result by the channel code
     * @param sources Filter result by source
     * @param validationMessageCategory Filter result by validation message category
     * @param externalCode Filter result by the external code. The result set will contain all reservations that have an external code starting with the  provided value
     * @param textSearch This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,  primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
     * @param balanceFilter This will filter reservations based on their balance.&lt;br /&gt;You can provide an array of string expressions which all need to apply.&lt;br /&gt;Each expression has the form of \&#39;OPERATION_VALUE\&#39; where VALUE needs to be of the valid format of the property type and OPERATION can be:&lt;br /&gt;\&#39;eq\&#39; for equals&lt;br /&gt;\&#39;neq\&#39; for not equals&lt;br /&gt;\&#39;lt\&#39; for less than&lt;br /&gt;\&#39;gt\&#39; for greater than&lt;br /&gt;\&#39;lte\&#39; for less than or equals&lt;br /&gt;\&#39;gte\&#39; for greater than or equals&lt;br /&gt;For instance&lt;br /&gt;\&#39;eq_5\&#39; would mean the value should equal 5&lt;br /&gt;\&#39;lte_7\&#39; would mean the value should be less than or equal to 7
     * @param allFoliosHaveInvoice If set to {true}, returns only reservations, in which all folios are closed and have an invoice.  If set to {false}, returns only reservations, in which some of the folios are open or don\&#39;t have an invoice
     * @param pageNumber Page number, starting from 1 and defaulting to 1. Results in 204 if there are no items on that page.
     * @param pageSize Page size. If this is not set, the pageNumber will be ignored and all values returned.
     * @param sort List of all fields that can be used to sort the results. Possible values are: arrival:asc, arrival:desc, departure:asc, departure:desc, created:asc, created:desc, updated:asc, updated:desc, id:asc, id:desc, firstname:asc, firstname:desc, lastname:asc, lastname:desc, unitname:asc, unitname:desc. All other values will be silently ignored.
     * @param expand List of all embedded resources that should be expanded in the response. Possible values are: booker, actions, timeSlices, services, assignedUnits, company. All other values will be silently ignored.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationsGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, pageNumber?: number, pageSize?: number, sort?: Array<'arrival:asc' | 'arrival:desc' | 'departure:asc' | 'departure:desc' | 'created:asc' | 'created:desc' | 'updated:asc' | 'updated:desc' | 'id:asc' | 'id:desc' | 'firstname:asc' | 'firstname:desc' | 'lastname:asc' | 'lastname:desc' | 'unitname:asc' | 'unitname:desc'>, expand?: Array<'booker' | 'actions' | 'timeSlices' | 'services' | 'assignedUnits' | 'company'>, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<ReservationListModel>;
    public bookingReservationsGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, pageNumber?: number, pageSize?: number, sort?: Array<'arrival:asc' | 'arrival:desc' | 'departure:asc' | 'departure:desc' | 'created:asc' | 'created:desc' | 'updated:asc' | 'updated:desc' | 'id:asc' | 'id:desc' | 'firstname:asc' | 'firstname:desc' | 'lastname:asc' | 'lastname:desc' | 'unitname:asc' | 'unitname:desc'>, expand?: Array<'booker' | 'actions' | 'timeSlices' | 'services' | 'assignedUnits' | 'company'>, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<ReservationListModel>>;
    public bookingReservationsGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, pageNumber?: number, pageSize?: number, sort?: Array<'arrival:asc' | 'arrival:desc' | 'departure:asc' | 'departure:desc' | 'created:asc' | 'created:desc' | 'updated:asc' | 'updated:desc' | 'id:asc' | 'id:desc' | 'firstname:asc' | 'firstname:desc' | 'lastname:asc' | 'lastname:desc' | 'unitname:asc' | 'unitname:desc'>, expand?: Array<'booker' | 'actions' | 'timeSlices' | 'services' | 'assignedUnits' | 'company'>, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<ReservationListModel>>;
    public bookingReservationsGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, pageNumber?: number, pageSize?: number, sort?: Array<'arrival:asc' | 'arrival:desc' | 'departure:asc' | 'departure:desc' | 'created:asc' | 'created:desc' | 'updated:asc' | 'updated:desc' | 'id:asc' | 'id:desc' | 'firstname:asc' | 'firstname:desc' | 'lastname:asc' | 'lastname:desc' | 'unitname:asc' | 'unitname:desc'>, expand?: Array<'booker' | 'actions' | 'timeSlices' | 'services' | 'assignedUnits' | 'company'>, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bookingId !== undefined && bookingId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bookingId, 'bookingId');
        }
        if (propertyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                propertyIds.join(COLLECTION_FORMATS['csv']), 'propertyIds');
        }
        if (ratePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanIds.join(COLLECTION_FORMATS['csv']), 'ratePlanIds');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (unitIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitIds.join(COLLECTION_FORMATS['csv']), 'unitIds');
        }
        if (unitGroupIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupIds.join(COLLECTION_FORMATS['csv']), 'unitGroupIds');
        }
        if (unitGroupTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupTypes.join(COLLECTION_FORMATS['csv']), 'unitGroupTypes');
        }
        if (blockIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                blockIds.join(COLLECTION_FORMATS['csv']), 'blockIds');
        }
        if (status) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                status.join(COLLECTION_FORMATS['csv']), 'status');
        }
        if (dateFilter !== undefined && dateFilter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFilter, 'dateFilter');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (channelCode) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                channelCode.join(COLLECTION_FORMATS['csv']), 'channelCode');
        }
        if (sources) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                sources.join(COLLECTION_FORMATS['csv']), 'sources');
        }
        if (validationMessageCategory) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                validationMessageCategory.join(COLLECTION_FORMATS['csv']), 'validationMessageCategory');
        }
        if (externalCode !== undefined && externalCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>externalCode, 'externalCode');
        }
        if (textSearch !== undefined && textSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>textSearch, 'textSearch');
        }
        if (balanceFilter) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                balanceFilter.join(COLLECTION_FORMATS['csv']), 'balanceFilter');
        }
        if (allFoliosHaveInvoice !== undefined && allFoliosHaveInvoice !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allFoliosHaveInvoice, 'allFoliosHaveInvoice');
        }
        if (pageNumber !== undefined && pageNumber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageNumber, 'pageNumber');
        }
        if (pageSize !== undefined && pageSize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>pageSize, 'pageSize');
        }
        if (sort) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                sort.join(COLLECTION_FORMATS['csv']), 'sort');
        }
        if (expand) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                expand.join(COLLECTION_FORMATS['csv']), 'expand');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<ReservationListModel>(`${this.configuration.basePath}/booking/v1/reservations`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Returns the number of reservations fulfilling the criteria specified in the parameters.
     * If no parameters are set, returns the total count of reservations.&lt;br&gt;You must have at least one of these scopes: \&#39;reservations.read, reservations.manage\&#39;.
     * @param bookingId Filter result by booking id
     * @param propertyIds Filter result by requested properties
     * @param ratePlanIds Filter result by requested rate plans
     * @param companyIds Filter result by requested companies
     * @param unitIds Filter result by assigned units
     * @param unitGroupIds Filter result by requested unit groups
     * @param unitGroupTypes Filter result by requested unit group types
     * @param blockIds Filter result by requested blocks
     * @param status Filter result by reservation status
     * @param dateFilter Filter by date and time attributes of reservation. Use in combination with the \&#39;To\&#39; and \&#39;From\&#39; attributes.  All filters will check if the date specified by the filter type is between from (included) and to (excluded).  The exception being filtering for \&#39;stay\&#39;, which will return all reservations that are overlapping with the interval specified by from and to.
     * @param from The start of the time interval. When filtering by date, at least one of \&#39;from\&#39; and \&#39;to\&#39; has to be specified&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param to The end of the time interval, must be larger than \&#39;from\&#39;. When filtering by date, at least one of \&#39;from\&#39; and \&#39;to\&#39; has to be specified&lt;br /&gt;A date and time (without fractional second part) in UTC or with UTC offset as defined in &lt;a href&#x3D;\&quot;https://en.wikipedia.org/wiki/ISO_8601\&quot;&gt;ISO8601:2004&lt;/a&gt;
     * @param channelCode Filter result by the channel code
     * @param sources Filter result by source
     * @param validationMessageCategory Filter result by validation message category
     * @param externalCode Filter result by the external code. The result set will contain all reservations that have an external code starting with the  provided value
     * @param textSearch This will filter all reservations where the provided text is contained in: booker first name or last name or email or company name,  primary guest first name or last name or email or company name, external code, reservation id, unit name. The search is case insensitive.
     * @param balanceFilter This will filter reservations based on their balance.&lt;br /&gt;You can provide an array of string expressions which all need to apply.&lt;br /&gt;Each expression has the form of \&#39;OPERATION_VALUE\&#39; where VALUE needs to be of the valid format of the property type and OPERATION can be:&lt;br /&gt;\&#39;eq\&#39; for equals&lt;br /&gt;\&#39;neq\&#39; for not equals&lt;br /&gt;\&#39;lt\&#39; for less than&lt;br /&gt;\&#39;gt\&#39; for greater than&lt;br /&gt;\&#39;lte\&#39; for less than or equals&lt;br /&gt;\&#39;gte\&#39; for greater than or equals&lt;br /&gt;For instance&lt;br /&gt;\&#39;eq_5\&#39; would mean the value should equal 5&lt;br /&gt;\&#39;lte_7\&#39; would mean the value should be less than or equal to 7
     * @param allFoliosHaveInvoice If set to {true}, returns only reservations, in which all folios are closed and have an invoice.  If set to {false}, returns only reservations, in which some of the folios are open or don\&#39;t have an invoice
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public bookingReservationscountGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<CountModel>;
    public bookingReservationscountGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpResponse<CountModel>>;
    public bookingReservationscountGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<HttpEvent<CountModel>>;
    public bookingReservationscountGet(bookingId?: string, propertyIds?: Array<string>, ratePlanIds?: Array<string>, companyIds?: Array<string>, unitIds?: Array<string>, unitGroupIds?: Array<string>, unitGroupTypes?: Array<'BedRoom' | 'MeetingRoom' | 'EventSpace' | 'ParkingLot' | 'Other'>, blockIds?: Array<string>, status?: Array<'Confirmed' | 'InHouse' | 'CheckedOut' | 'Canceled' | 'NoShow'>, dateFilter?: 'Arrival' | 'Departure' | 'Stay' | 'Creation' | 'Modification' | 'Cancellation', from?: string, to?: string, channelCode?: Array<'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs'>, sources?: Array<string>, validationMessageCategory?: Array<'OfferNotAvailable' | 'AutoUnitAssignment'>, externalCode?: string, textSearch?: string, balanceFilter?: Array<string>, allFoliosHaveInvoice?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (bookingId !== undefined && bookingId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>bookingId, 'bookingId');
        }
        if (propertyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                propertyIds.join(COLLECTION_FORMATS['csv']), 'propertyIds');
        }
        if (ratePlanIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                ratePlanIds.join(COLLECTION_FORMATS['csv']), 'ratePlanIds');
        }
        if (companyIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                companyIds.join(COLLECTION_FORMATS['csv']), 'companyIds');
        }
        if (unitIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitIds.join(COLLECTION_FORMATS['csv']), 'unitIds');
        }
        if (unitGroupIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupIds.join(COLLECTION_FORMATS['csv']), 'unitGroupIds');
        }
        if (unitGroupTypes) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                unitGroupTypes.join(COLLECTION_FORMATS['csv']), 'unitGroupTypes');
        }
        if (blockIds) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                blockIds.join(COLLECTION_FORMATS['csv']), 'blockIds');
        }
        if (status) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                status.join(COLLECTION_FORMATS['csv']), 'status');
        }
        if (dateFilter !== undefined && dateFilter !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>dateFilter, 'dateFilter');
        }
        if (from !== undefined && from !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>from, 'from');
        }
        if (to !== undefined && to !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>to, 'to');
        }
        if (channelCode) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                channelCode.join(COLLECTION_FORMATS['csv']), 'channelCode');
        }
        if (sources) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                sources.join(COLLECTION_FORMATS['csv']), 'sources');
        }
        if (validationMessageCategory) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                validationMessageCategory.join(COLLECTION_FORMATS['csv']), 'validationMessageCategory');
        }
        if (externalCode !== undefined && externalCode !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>externalCode, 'externalCode');
        }
        if (textSearch !== undefined && textSearch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>textSearch, 'textSearch');
        }
        if (balanceFilter) {
            localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
                balanceFilter.join(COLLECTION_FORMATS['csv']), 'balanceFilter');
        }
        if (allFoliosHaveInvoice !== undefined && allFoliosHaveInvoice !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>allFoliosHaveInvoice, 'allFoliosHaveInvoice');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (oauth2) required
        localVarCredential = this.configuration.lookupCredential('oauth2');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('Authorization', 'Bearer ' + localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        return this.httpClient.get<CountModel>(`${this.configuration.basePath}/booking/v1/reservations/$count`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
