/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { EmbeddedPropertyModel } from './embeddedPropertyModel';
import { SurchargeModel } from './surchargeModel';
import { BookingPeriodModel } from './bookingPeriodModel';
import { EmbeddedTimeSliceDefinitionModel } from './embeddedTimeSliceDefinitionModel';
import { AccountingConfigModel } from './accountingConfigModel';
import { RatePlanAgeCategoryModel } from './ratePlanAgeCategoryModel';
import { CompanyRatePlanModel } from './companyRatePlanModel';
import { EmbeddedCancellationPolicyModel } from './embeddedCancellationPolicyModel';
import { EmbeddedNoShowPolicyModel } from './embeddedNoShowPolicyModel';
import { BookingRestrictionsModel } from './bookingRestrictionsModel';
import { RatePlanServiceItemModel } from './ratePlanServiceItemModel';
import { EmbeddedUnitGroupModel } from './embeddedUnitGroupModel';
import { PricingRuleModel } from './pricingRuleModel';
import { RatesRangeModel } from './ratesRangeModel';


export interface RatePlanItemModel { 
    /**
     * The rate plan id
     */
    id: string;
    /**
     * The code for the rate plan that can be shown in reports and table views
     */
    code: string;
    /**
     * The name for the rate plan
     */
    name: string;
    /**
     * The description for the rate plan
     */
    description: string;
    /**
     * The minimum guarantee to be provided when this rate plan is booked so  the reservation will be guaranteed to the guest
     */
    minGuaranteeType: RatePlanItemModel.MinGuaranteeTypeEnum;
    /**
     * The calculation mode is used when calculating the adults\' surcharges and derived rates.  Defaults to Truncate. Example: for a rate of 125.99 and a surcharge of +10%,  when Truncate is selected, the result would be 125.99 + 12 = 137.99  When Round is selected, the result would be 125.99 + 12.60 = 138.59
     */
    priceCalculationMode?: RatePlanItemModel.PriceCalculationModeEnum;
    property: EmbeddedPropertyModel;
    unitGroup: EmbeddedUnitGroupModel;
    cancellationPolicy: EmbeddedCancellationPolicyModel;
    noShowPolicy: EmbeddedNoShowPolicyModel;
    /**
     * The channel codes the rate plan is sold through
     */
    channelCodes: Array<RatePlanItemModel.ChannelCodesEnum>;
    /**
     * The rate codes for promotional and hidden rates. If at least one code is set the rate will be not publicly visible  anymore and only be offered when one of the promo codes is given in the offer request.  For backward compatibility it is still not possible to set multiple promo codes.
     */
    promoCodes?: Array<string>;
    timeSliceDefinition: EmbeddedTimeSliceDefinitionModel;
    restrictions?: BookingRestrictionsModel;
    /**
     * Time periods when the rate plan is bookable
     */
    bookingPeriods?: Array<BookingPeriodModel>;
    /**
     * Indicates whether the rate plan has an active booking period
     */
    isBookable: boolean;
    /**
     * Whether the rate plan is subject to city tax or not
     */
    isSubjectToCityTax: boolean;
    pricingRule?: PricingRuleModel;
    /**
     * Indicates whether the rates for this rate plan are derived from another rate plan
     */
    isDerived: boolean;
    /**
     * Indicates the derivation level of the rate plan. When zero, it is a rate plan with manually managed prices.
     */
    derivationLevel: number;
    /**
     * Additional charges for more than single occupancy. The percent or absolute value will be added to the manually defined or calculated derived rates.
     */
    surcharges?: Array<SurchargeModel>;
    /**
     * Additional charges per age category.
     */
    ageCategories?: Array<RatePlanAgeCategoryModel>;
    /**
     * Services that are included in the rate plan
     */
    includedServices?: Array<RatePlanServiceItemModel>;
    /**
     * Companies that can use this rate plan
     */
    companies?: Array<CompanyRatePlanModel>;
    ratesRange?: RatesRangeModel;
    /**
     * The collection of accounting configs with validity periods.
     */
    accountingConfigs: Array<AccountingConfigModel>;
}
export namespace RatePlanItemModel {
    export type MinGuaranteeTypeEnum = 'PM6Hold' | 'CreditCard' | 'Prepayment' | 'Company';
    export const MinGuaranteeTypeEnum = {
        Pm6Hold: 'PM6Hold' as MinGuaranteeTypeEnum,
        CreditCard: 'CreditCard' as MinGuaranteeTypeEnum,
        Prepayment: 'Prepayment' as MinGuaranteeTypeEnum,
        Company: 'Company' as MinGuaranteeTypeEnum
    };
    export type PriceCalculationModeEnum = 'Truncate' | 'Round';
    export const PriceCalculationModeEnum = {
        Truncate: 'Truncate' as PriceCalculationModeEnum,
        Round: 'Round' as PriceCalculationModeEnum
    };
    export type ChannelCodesEnum = 'Direct' | 'BookingCom' | 'Ibe' | 'ChannelManager' | 'Expedia' | 'Homelike' | 'Hrs';
    export const ChannelCodesEnum = {
        Direct: 'Direct' as ChannelCodesEnum,
        BookingCom: 'BookingCom' as ChannelCodesEnum,
        Ibe: 'Ibe' as ChannelCodesEnum,
        ChannelManager: 'ChannelManager' as ChannelCodesEnum,
        Expedia: 'Expedia' as ChannelCodesEnum,
        Homelike: 'Homelike' as ChannelCodesEnum,
        Hrs: 'Hrs' as ChannelCodesEnum
    };
}


