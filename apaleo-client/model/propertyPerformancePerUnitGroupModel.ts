/**
 * apaleo Inventory API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { MonetaryValueModel } from './monetaryValueModel';
import { EmbeddedUnitGroupModel } from './embeddedUnitGroupModel';


export interface PropertyPerformancePerUnitGroupModel { 
    unitGroup: EmbeddedUnitGroupModel;
    /**
     * The number of units physically existing excluding the ones which are out of inventory
     */
    houseCount: number;
    /**
     * The number of items (e.g. beds, seats, etc.) physically existing excluding the ones which are out of inventory
     */
    houseItemsCount: number;
    /**
     * The number of sold units plus definitely blocked units from group bookings
     */
    soldCount: number;
    /**
     * The number of sold items (e.g. beds, seats, etc.) plus definitely blocked items from group bookings
     */
    soldItemsCount: number;
    /**
     * The number of unsold units: house count minus sold units and out of order units
     */
    unsoldCount: number;
    /**
     * The number of unsold items (e.g. beds, seats, etc.): house items count minus sold items and out of order items
     */
    unsoldItemsCount: number;
    /**
     * The number of units which are out of order
     */
    outOfOrderCount: number;
    /**
     * The number of items (e.g. beds, seats, etc.) which are out of order
     */
    outOfOrderItemsCount: number;
    /**
     * The number of units which are tentatively blocked
     */
    tentativelyBlockedCount: number;
    /**
     * The number of items (beds, seats, etc.) which are tentatively blocked
     */
    tentativelyBlockedItemsCount: number;
    /**
     * The number of arrivals units
     */
    arrivalsCount: number;
    /**
     * The number of departures units
     */
    departuresCount: number;
    /**
     * The number of no-show units
     */
    noShowsCount: number;
    /**
     * The number of cancelled units
     */
    cancellationsCount: number;
    /**
     * The occupancy in percent, which is the ratio of sold units in relation to house count minus out of order units
     */
    occupancyPercentage: number;
    grossUnitRevenue: MonetaryValueModel;
    netUnitRevenue: MonetaryValueModel;
    grossAccommodationRevenue: MonetaryValueModel;
    netAccommodationRevenue: MonetaryValueModel;
    grossFoodAndBeveragesRevenue: MonetaryValueModel;
    netFoodAndBeveragesRevenue: MonetaryValueModel;
    grossOtherRevenue: MonetaryValueModel;
    netOtherRevenue: MonetaryValueModel;
    grossAdr: MonetaryValueModel;
    netAdr: MonetaryValueModel;
    revPar: MonetaryValueModel;
}

